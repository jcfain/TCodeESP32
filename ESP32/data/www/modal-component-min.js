const modalTemplate=document.createElement("template");modalTemplate.innerHTML='\n<style>\n    .modal-overlay {\n        position: fixed;\n        z-index: 50;\n        width: 100vw;\n        height: 100vh;\n        top: 0;\n        background: rgb(0.5,0.5,0.5,0.5);\n    }\n    .modal-container {\n        display: flex;\n        flex-flow: column !important;\n        flex-wrap: nowrap;\n        overflow-y: hidden;\n        max-height: 100vh;\n        max-width: 85vw;\n        margin: auto;\n        background-color: black;\n        border: 1px solid white;\n        border-radius: 25px;\n    }\n    .modal-header {\n        display: flex;\n        justify-content: space-between;\n    }\n    .modal-close-button {\n        margin: 16px;\n        border-radius: 25px;\n        width: 30px;\n        height: 30px;\n        text-align: center;\n    }\n    .modal-body {\n        display: flex;\n        justify-content: center;\n        overflow-y: auto;\n    }\n    .modal-container {\n        display: flex;\n        flex-flow: row;\n        flex-wrap: nowrap;\n        justify-content: space-between;\n    }\n\n</style>\n<div class="modal-overlay">\n    <div class="modal-container">\n        <div class="modal-header">\n            <h2>\n                <slot name="title"></slot>\n            </h2>\n            <div><button class="modal-close-button" onclick="this.getRootNode().host.hide()">X</button></div>\n        </div>\n        <div class="modal-body">\n            <slot></slot>\n        </div>\n        <div class="modal-footer">\n            <div>\n                <slot name="footerStart"></slot>\n            </div>\n            <div>\n                <slot name="footerEnd"></slot>\n            </div>\n        </div>\n    </div>\n</div>\n';class ModalComponent extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"}).append(modalTemplate.content.cloneNode(!0))}static get observedAttributes(){return["visible"]}attributeChangedCallback(n,e,t){"visible"==n&&(t?this.show():this.hide())}connectedCallback(){}disconnectedCallback(){}adoptedCallback(){}show(){this.classList.remove("hidden")}hide(){this.classList.add("hidden"),this.removeAttribute("visible")}}customElements.define("modal-component",ModalComponent);