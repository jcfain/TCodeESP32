Utils={round2:value=>Math.round(100*value)/100,_debounces:[{name:"Debounce1",timeout:0,delay:0,paramsArray:void 0}],debounce(name,methodToDebounce,delayInMS,...methodToDebounceParamsArray){this._debounces[name]?Object.keys(this._debounces).forEach((x=>{clearTimeout(this._debounces[x].timeout)})):this._debounces[name]={name:name,timeout:0,delay:delayInMS,paramsArray:methodToDebounceParamsArray},Object.keys(this._debounces).forEach((x=>{this._debounces[x].timeout=setTimeout((()=>{this._debounces[x].paramsArray?methodToDebounce(...this._debounces[x].paramsArray):methodToDebounce(),delete this._debounces[x]}),this._debounces[x].delay)}))},toggleElementShown(element,isVisible,animate){let className="hidden";animate&&(className="hidden-transition",element.classList.contains("max-height-transition")||element.classList.add("max-height-transition")),null!=isVisible?isVisible?element.classList.remove(className):element.classList.add(className):element.classList.toggle(className)},toggleControlVisibilityByID(id,isVisible,animate,elementCallback){var control=document.getElementById(id);this.toggleElementShown(control,isVisible,animate),elementCallback&&elementCallback(control)},toggleControlVisibilityByName(name,isVisible,animate,elementCallback){for(var controls=document.getElementsByName(name),i=0;i<controls.length;i++)this.toggleElementShown(controls[i],isVisible,animate),elementCallback&&elementCallback(controls[i])},toggleControlVisibilityByClassName(className,isVisible,animate,elementCallback){for(var controls=document.getElementsByClassName(className),i=0;i<controls.length;i++)this.toggleElementShown(controls[i],isVisible,animate),elementCallback&&elementCallback(controls[i])},createFormRow(id){const row=document.createElement("div");return row.classList.add("tRow"),id&&(row.id=id),row},createFormCell(id,name,inputID,value){const cell=document.createElement("div");if(cell.classList.add("tCell"),id&&(cell.id=id),name){const span=document.createElement("span");span.innerText=name,cell.appendChild(span)}return inputID&&this.createTextInput(inputID,value,cell),cell},createFormButtonRow(rowID,buttonID,buttonLabel){const row=this.createFormRow(rowID),emptyCell=this.createFormCell(),buttonCell=this.createFormCell(),button=document.createElement("button");return button.innerText=buttonLabel,button.id=buttonID,buttonCell.appendChild(button),row.appendChild(emptyCell),row.appendChild(buttonCell),{row:row,emptyCell:emptyCell,buttonCell:buttonCell,button:button}},createTextInput(id,value,maxLength,callback){const input=document.createElement("input");return input.type="text",id&&(input.id=id),value&&(input.value=value),maxLength&&(input.maxLength=maxLength),callback&&(input.oninput=callback),input},createTextAreaInput(id,value,maxLength,callback){const input=document.createElement("textarea");return input.type="text",id&&(input.id=id),value&&(input.value=value),maxLength&&(input.maxLength=maxLength),callback&&(input.oninput=callback),input},createCheckboxInput(id,checked,callback){const input=document.createElement("input");return input.type="checkbox",id&&(input.id=id),checked&&(input.checked=checked),callback&&(input.onclick=callback),input},createNumericInput(id,value,min,max,callback){const input=document.createElement("input");return input.type="number",id&&(input.id=id),value&&(input.value=value),min&&(input.min=min),max&&(input.max=max),callback&&(input.oninput=callback),input},createTextFormRow(rowID,name,textInputID,value,maxLength,callback){const row=this.createFormRow(rowID),nameCell=this.createFormCell(0,name),valueCell=this.createFormCell(),input=this.createTextInput(textInputID,value,maxLength,callback);return valueCell.appendChild(input),row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:input,nameCell:nameCell,valueCell:valueCell}},createTextAreaFormRow(rowID,name,textInputID,value,maxLength,callback){const row=this.createFormRow(rowID),nameCell=this.createFormCell(0,name),valueCell=this.createFormCell(),input=this.createTextAreaInput(textInputID,value,maxLength,callback);return valueCell.appendChild(input),row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:input,nameCell:nameCell,valueCell:valueCell}},createNumericFormRow(rowID,name,inputID,value,min,max,callback){const row=this.createFormRow(rowID),nameCell=this.createFormCell(0,name),valueCell=this.createFormCell(),input=this.createNumericInput(inputID,value,min,max,callback);return valueCell.appendChild(input),row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:input,nameCell:nameCell,valueCell:valueCell}},createCheckboxFormRow(rowID,name,inputID,checked,callback){const row=this.createFormRow(rowID),nameCell=this.createFormCell(0,name),valueCell=this.createFormCell(),input=this.createCheckboxInput(inputID,checked,callback);return valueCell.appendChild(input),row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:input,nameCell:nameCell,valueCell:valueCell}},createLabelFormRow(rowID,name){const row=this.createFormRow(rowID),nameCell=this.createFormCell(0,name),valueCell=this.createFormCell();return row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:void 0,nameCell:nameCell,valueCell:valueCell}},createInstructionRow(rowID,instruction){const row=this.createFormRow(rowID),nameCell=this.createFormCell(),valueCell=this.createFormCell(),span=document.createElement("span");return span.classList.add("instruction-text"),span.innerHTML=instruction,valueCell.appendChild(span),row.appendChild(nameCell),row.appendChild(valueCell),{row:row,input:void 0,nameCell:nameCell,valueCell:valueCell}},createTableSection(){var rootdiv=document.createElement("div");rootdiv.classList.add("formTable"),rootdiv.style="box-shadow: none; width: 100%;";var parent=document.createElement("div"),header=document.createElement("div");header.classList.add("tHeader"),rootdiv.appendChild(header),rootdiv.appendChild(parent);var tableDiv=document.createElement("div");tableDiv.classList.add("formTable"),tableDiv.style="box-shadow: none; width: auto; margin: 0; padding: 0;";var tableBody=document.createElement("div");return tableDiv.appendChild(tableBody),parent.appendChild(tableDiv),{root:rootdiv,table:tableDiv,body:tableBody,header:header,parent:parent}},createModalTableSection(modalElement,modelTitle){let title=document.createElement("span");title.setAttribute("slot","title"),title.innerText=modelTitle;let table=this.createTableSection();return modalElement.appendChild(title),modalElement.appendChild(table.header),modalElement.appendChild(table.root),table}};